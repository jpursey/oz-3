constexpr oz3::MacroCodeDef kMacroCode_GetWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CpuCore::MM0,
     .code = "UL;"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C2,
     .code = "UL;LKR(m);ADR(m);LD(C2);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C2);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .ret = CpuCore::C2,
     .code = "UL;LK(STACK);ADR(SP);LD(C2);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(C2);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .ret = CpuCore::C2,
     .code = "UL;LK(STACK);ADR(FP);LD(C2);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(C2);UL;"},
    {.source = "$v",
     .prefix = {28, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C2);UL;"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C2);UL;"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C2);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_GetDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "UL;LKR(m);ADR(m);LD(C0);LD(C1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .ret = CpuCore::CpuCore::MM,
     .code = "UL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .ret = CpuCore::CD,
     .code = "UL;LK(STACK);ADR(SP);LD(C0);LD(C1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,SP);LK(STACK);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .ret = CpuCore::CD,
     .code = "UL;LK(STACK);ADR(FP);LD(C0);LD(C1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,FP);LK(STACK);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "$v",
     .prefix = {24, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(C0);LD(C1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_Get16BitMask[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C2,15);CMP(C2,m);JC(NS,@start);MOVI(C0,0);JP(@done);"
             "@start:MOV(C2,m);MOVI(C0,1);CMP(m,C1);JC(Z,@done);"
             "@shift:SL(C0);JD(C2,@shift);@done:MSS(_);"},
    {.source = "0",
     .prefix = {8, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,1);"},
    {.source = "1",
     .prefix = {9, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,2);"},
    {.source = "2",
     .prefix = {10, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,4);"},
    {.source = "3",
     .prefix = {11, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,8);"},
    {.source = "4",
     .prefix = {12, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,16);"},
    {.source = "5",
     .prefix = {13, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,32);"},
    {.source = "6",
     .prefix = {14, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);"},
    {.source = "7",
     .prefix = {15, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);"},
    {.source = "8",
     .prefix = {16, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);"},
    {.source = "9",
     .prefix = {17, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);"},
    {.source = "10",
     .prefix = {18, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "11",
     .prefix = {19, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "12",
     .prefix = {20, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "13",
     .prefix = {21, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);"},
    {.source = "14",
     .prefix = {22, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);"},
    {.source = "15",
     .prefix = {23, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);SL(C0);"},
};

constexpr oz3::MacroCodeDef kMacroCode_Get32BitMask[] = {
    {.source = "$r",
     .prefix = {0, 3},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C2,16);CMP(C2,m);JC(S,@upper);JC(Z,@sixteen);"
             "MOVI(C0,1);CMP(m,C1);JC(Z,@done);MOV(C2,m);"
             "@shift_lower:SL(C0);JD(C2,@shift_lower);JP(@done);"
             "@sixteen:MOVI(C1,1);JP(@done);@upper:MOVI(C2,31);CMP(C2,m);"
             "JC(NS,@start_upper);MOVI(C0,0);JP(@done);"
             "@start_upper:MOV(C2,m);ADDI(C2,-16);MOVI(C1,1);CMP(C2,C0);"
             "JC(Z,@done);@shift_upper:SL(C1);JD(C2,@shift_upper);"
             "@done:MSS(_);"},
    {.source = "0",
     .prefix = {8, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,1);"},
    {.source = "1",
     .prefix = {9, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,2);"},
    {.source = "2",
     .prefix = {10, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,4);"},
    {.source = "3",
     .prefix = {11, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,8);"},
    {.source = "4",
     .prefix = {12, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,16);"},
    {.source = "5",
     .prefix = {13, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,32);"},
    {.source = "6",
     .prefix = {14, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);"},
    {.source = "7",
     .prefix = {15, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);"},
    {.source = "8",
     .prefix = {16, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);"},
    {.source = "9",
     .prefix = {17, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);"},
    {.source = "10",
     .prefix = {18, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "11",
     .prefix = {19, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "12",
     .prefix = {20, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "13",
     .prefix = {21, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);"},
    {.source = "14",
     .prefix = {22, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);"},
    {.source = "15",
     .prefix = {23, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);SL(C0);"},
    {.source = "16",
     .prefix = {24, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,1);"},
    {.source = "17",
     .prefix = {25, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,2);"},
    {.source = "18",
     .prefix = {26, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,4);"},
    {.source = "19",
     .prefix = {27, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,8);"},
    {.source = "20",
     .prefix = {28, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,16);"},
    {.source = "21",
     .prefix = {29, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,32);"},
    {.source = "22",
     .prefix = {30, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);"},
    {.source = "23",
     .prefix = {31, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);"},
    {.source = "24",
     .prefix = {32, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);"},
    {.source = "25",
     .prefix = {33, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);"},
    {.source = "26",
     .prefix = {34, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);"},
    {.source = "27",
     .prefix = {35, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"},
    {.source = "28",
     .prefix = {36, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"},
    {.source = "29",
     .prefix = {37, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"
             "SL(C1);"},
    {.source = "30",
     .prefix = {38, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"
             "SL(C1);SL(C1);"},
    {.source = "31",
     .prefix = {39, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"
             "SL(C1);SL(C1);SL(C1);"},
};

constexpr oz3::MacroCodeDef kMacroCode_LoadWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(p,m);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(p);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(p);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(p);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(p);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;LK(STACK);ADR(FP);LD(p);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(p);UL;"},
    {.source = "$v",
     .prefix = {28, 5},
     .code = "LD(p);UL;"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(p);UL;"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(p);UL;"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(p);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_LoadDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(p0);LD(p1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(p0);LD(p1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;MOV(p0,m0);MOV(p1,m1);"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(p0);LD(p1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(p0);LD(p1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;LK(STACK);ADR(FP);LD(p0);LD(p1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(p0);LD(p1);UL;"},
    {.source = "$V",
     .prefix = {24, 5},
     .code = "LD(p0);LD(p1);UL;"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(p0);LD(p1);UL;"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(p0);LD(p1);UL;"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(p0);LD(p1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_StoreWord[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);ST(p);UL;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);ST(p);UL;"},
    {.source = "(SP)",
     .prefix = {16, 5},
     .code = "UL;LK(STACK);ADR(SP);ST(p);UL;"},
    {.source = "(SP + $v)",
     .prefix = {17, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);ST(p);UL;"},
    {.source = "(FP)",
     .prefix = {18, 5},
     .code = "UL;LK(STACK);ADR(FP);ST(p);UL;"},
    {.source = "(FP + $v)",
     .prefix = {19, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);ST(p);UL;"},
    {.source = "S($v)",
     .prefix = {20, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);ST(p);UL;"},
    {.source = "D($v)",
     .prefix = {21, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);ST(p);UL;"},
    {.source = "E($v)",
     .prefix = {22, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);ST(p);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_StoreDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);ST(p0);ST(p1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);ST(p0);ST(p1);UL;"},
    {.source = "[SP]",
     .prefix = {16, 5},
     .code = "UL;LK(STACK);ADR(SP);ST(p0);ST(p1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {17, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);ST(p0);ST(p1);UL;"},
    {.source = "[FP]",
     .prefix = {18, 5},
     .code = "UL;LK(STACK);ADR(FP);ST(p0);ST(p1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {19, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);ST(p0);ST(p1);UL;"},
    {.source = "S[$v]",
     .prefix = {20, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);ST(p0);ST(p1);UL;"},
    {.source = "D[$v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);ST(p0);ST(p1);UL;"},
    {.source = "E[$v]",
     .prefix = {22, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);ST(p0);ST(p1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_MoveSReg[] = {
    {.source = "$r, BC",
     .prefix = {0, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BC);"},
    {.source = "$r, BS",
     .prefix = {1, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BS);"},
    {.source = "$r, BD",
     .prefix = {2, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BD);"},
    {.source = "$r, BE",
     .prefix = {3, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BE);"},
    {.source = "$r, FP",
     .prefix = {4, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,FP);"},
    {.source = "$r, SP",
     .prefix = {5, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,SP);"},
    {.source = "BC, $r",
     .prefix = {6, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BC,m);"},
    {.source = "BS, $r",
     .prefix = {7, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BS,m);"},
    {.source = "BD, $r",
     .prefix = {8, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BD,m);"},
    {.source = "BE, $r",
     .prefix = {9, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BE,m);"},
    {.source = "FP, $r",
     .prefix = {10, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(FP,m);"},
    {.source = "SP, $r",
     .prefix = {11, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(SP,m);"},
    {.source = "BC, $v",
     .prefix = {96, 7},
     .code = "LD(C0);UL;MOV(BC,C0);"},
    {.source = "BS, $v",
     .prefix = {97, 7},
     .code = "LD(C0);UL;MOV(BS,C0);"},
    {.source = "BD, $v",
     .prefix = {98, 7},
     .code = "LD(C0);UL;MOV(BD,C0);"},
    {.source = "BE, $v",
     .prefix = {99, 7},
     .code = "LD(C0);UL;MOV(BE,C0);"},
    {.source = "FP, $v",
     .prefix = {100, 7},
     .code = "LD(C0);UL;MOV(FP,C0);"},
    {.source = "SP, $v",
     .prefix = {101, 7},
     .code = "LD(C0);UL;MOV(SP,C0);"},
};

constexpr oz3::MacroCodeDef kMacroCode_PopWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LK(STACK);ADR(SP);LD(m);LAD(SP);UL;"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);UL;LKR(m);ADR(m);ST(C2);"
             "UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);UL;ADD(C0,m);"
             "LKR(m);ADR(C0);ST(C2);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);ST(C2);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);ADD(C0,SP);"
             "ADR(C0);ST(C2);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);ADR(FP);ST(C2);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);ADD(C0,FP);"
             "ADR(C0);ST(C2);UL;"},
    {.source = "S($v)",
     .prefix = {28, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);ADR(C0);ST(C2);UL;"},
    {.source = "D($v)",
     .prefix = {29, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);UL;LK(DATA);"
             "ADR(C0);ST(C2);UL;"},
    {.source = "E($v)",
     .prefix = {30, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(SP);LD(C2);LAD(SP);UL;LK(EXTRA);"
             "ADR(C0);ST(C2);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_PopDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);UL;LKR(m);ADR(m);"
             "ST(C0);ST(C1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);UL;"
             "ADD(C2,m);LKR(m);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;LK(STACK);ADR(SP);LD(m0);LD(m1);LAD(SP);UL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);ST(C0);ST(C1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);ADD(C2,SP);"
             "ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);ADR(FP);ST(C0);"
             "ST(C1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);ADD(C2,FP);"
             "ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "S[$v]",
     .prefix = {24, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);ADR(C2);"
             "ST(C0);ST(C1);UL;"},
    {.source = "D[$v]",
     .prefix = {25, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);UL;"
             "LK(DATA);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "E[$v]",
     .prefix = {26, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(SP);UL;"
             "LK(EXTRA);ADR(C2);ST(C0);ST(C1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_SwapWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p);MOV(p,m);MOV(m,C0);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p);LKR(m);ADR(m);LD(p);STP(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);MOV(C0,p);LKR(m);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;MOV(C0,p);LK(STACK);ADR(SP);LD(p);STP(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);MOV(C0,p);LK(STACK);ADR(C2);LD(p);"
             "STP(C0);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;MOV(C0,p);LK(STACK);ADR(FP);LD(p);STP(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);MOV(C0,p);LK(STACK);ADR(C2);LD(p);"
             "STP(C0);UL;"},
    {.source = "S($v)",
     .prefix = {28, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(STACK);ADR(C2);LD(p);STP(C0);UL;"},
    {.source = "D($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(DATA);ADR(C2);LD(p);STP(C0);UL;"},
    {.source = "E($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(EXTRA);ADR(C2);LD(p);STP(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_SwapDword[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(m);ADR(m);LD(p0);LD(p1);STP(C1);"
             "STP(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);MOV(C0,p0);MOV(C1,p1);LKR(m);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;MOV(C0,p0);MOV(p0,m0);MOV(m0,C0);MOV(C1,p1);MOV(p1,m1);"
             "MOV(m1,C1);"},
    {.source = "(SP)",
     .prefix = {20, 5},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(SP);LD(p0);LD(p1);"
             "STP(C1);STP(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "(FP)",
     .prefix = {22, 5},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(FP);LD(p0);LD(p1);"
             "STP(C1);STP(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "S($v)",
     .prefix = {24, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "D($v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(DATA);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "E($v)",
     .prefix = {26, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(EXTRA);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_LogicalShiftLeft16[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "CMP(m,C0);JC(Z,@zero);MOVI(C2,16);CMP(C2,m);JC(S,@max);"
             "MOV(C2,m);@shift:SL(p);JD(C2,@shift);MSR(C,C);CMP(p,C0);"
             "MSR(ZSO,ZSO);END;@max:MOVI(p,0);MSC(SCO);MSS(Z);MSR(SCO,Z);"
             "END;@zero:CMP(p,C0);MSR(ZSCO,ZSCO);END;"},
    {.source = "1",
     .prefix = {8, 5},
     .code = "SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "2",
     .prefix = {9, 5},
     .code = "SL(p);SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "3",
     .prefix = {10, 5},
     .code = "SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "4",
     .prefix = {11, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "5",
     .prefix = {12, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "6",
     .prefix = {13, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "7",
     .prefix = {14, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "8",
     .prefix = {15, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);MSR(C,C);"
             "CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "9",
     .prefix = {16, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "10",
     .prefix = {17, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "11",
     .prefix = {18, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "12",
     .prefix = {19, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "SL(p);SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "13",
     .prefix = {20, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "14",
     .prefix = {21, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "SL(p);SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);MSR(ZSO,ZSO);"},
    {.source = "15",
     .prefix = {22, 5},
     .code = "SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);SL(p);"
             "SL(p);SL(p);SL(p);SL(p);SL(p);MSR(C,C);CMP(p,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "16",
     .prefix = {23, 5},
     .code = "SR(p);MOVI(p,0);MSS(Z);MSC(SO);MSR(ZSCO,ZSCO);"},
};

constexpr oz3::MacroCodeDef kMacroCode_LogicalShiftLeft32[] = {
    {.source = "$r",
     .prefix = {0, 3},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "CMP(m,C0);JC(Z,@zero);MOVI(C2,32);CMP(C2,m);JC(S,@max);"
             "MOV(C2,m);@shift:SL(p0);RLC(p1);JD(C2,@shift);MSR(C,C);"
             "CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);END;"
             "@max:MOVI(p0,0);MOVI(p1,0);MSC(SCO);MSS(Z);MSR(SCO,Z);END;"
             "@zero:CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZCSO,CSO);END;"},
    {.source = "1",
     .prefix = {8, 6},
     .code = "SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);"
             "MSR(ZSO,SO);"},
    {.source = "2",
     .prefix = {9, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);"
             "CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "3",
     .prefix = {10, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);"
             "CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "4",
     .prefix = {11, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "5",
     .prefix = {12, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);"
             "MSR(ZSO,SO);"},
    {.source = "6",
     .prefix = {13, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);"
             "CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "7",
     .prefix = {14, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);"
             "CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "8",
     .prefix = {15, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "9",
     .prefix = {16, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);"
             "MSR(ZSO,SO);"},
    {.source = "10",
     .prefix = {17, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);"
             "CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "11",
     .prefix = {18, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);"
             "CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "12",
     .prefix = {19, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "13",
     .prefix = {20, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);"
             "MSR(ZSO,SO);"},
    {.source = "14",
     .prefix = {21, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);CMP(p0,C0);MSR(Z,Z);"
             "CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "15",
     .prefix = {22, 6},
     .code = "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);"
             "SL(p0);RLC(p1);SL(p0);RLC(p1);SL(p0);RLC(p1);MSR(C,C);"
             "CMP(p0,C0);MSR(Z,Z);CMP(p1,C0);MSR(ZSO,SO);"},
    {.source = "16",
     .prefix = {23, 6},
     .code = "SR(p1);MOV(p1,p0);MOVI(p0,0);MSR(C,C);CMP(p1,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "17",
     .prefix = {24, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);MSR(C,C);CMP(p1,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "18",
     .prefix = {25, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);MSR(C,C);CMP(p1,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "19",
     .prefix = {26, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);MSR(C,C);"
             "CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "20",
     .prefix = {27, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);MSR(C,C);"
             "CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "21",
     .prefix = {28, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "22",
     .prefix = {29, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "23",
     .prefix = {30, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "24",
     .prefix = {31, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "25",
     .prefix = {32, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "26",
     .prefix = {33, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);MSR(C,C);CMP(p1,C0);"
             "MSR(ZSO,ZSO);"},
    {.source = "27",
     .prefix = {34, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);MSR(C,C);"
             "CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "28",
     .prefix = {35, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);MSR(C,C);"
             "CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "29",
     .prefix = {36, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "30",
     .prefix = {37, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "31",
     .prefix = {38, 6},
     .code = "MOV(p1,p0);MOVI(p0,0);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);SL(p1);"
             "SL(p1);SL(p1);MSR(C,C);CMP(p1,C0);MSR(ZSO,ZSO);"},
    {.source = "32",
     .prefix = {39, 6},
     .code = "SR(p0);MOVI(p0,0);MOVI(p1,0);MSS(Z);MSC(SO);MSR(ZSCO,ZSCO);"},
};

constexpr oz3::MacroCodeDef kMacroCode_ReadPortWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PLD(S,m);MSR(S,S);PUL;"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PLD(S,C0);MSR(S,S);PUL;LKR(m);ADR(m);ST(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);PLK(p);PLD(S,C0);MSR(S,S);PUL;LKR(m);"
             "ADR(C2);ST(C0);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(STACK);ADR(SP);ST(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(STACK);"
             "ADR(C2);ST(C0);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(STACK);ADR(FP);ST(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(STACK);"
             "ADR(C2);ST(C0);UL;"},
    {.source = "S($v)",
     .prefix = {28, 5},
     .code = "LD(C2);UL;PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(STACK);ADR(C2);"
             "ST(C0);UL;"},
    {.source = "D($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(DATA);ADR(C2);"
             "ST(C0);UL;"},
    {.source = "E($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;PLK(p);PLD(S,C0);MSR(S,S);PUL;LK(EXTRA);ADR(C2);"
             "ST(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_ReadPortDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;LKR(m);ADR(m);"
             "ST(C0);ST(C1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;"
             "LKR(m);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;PLK(p);PLD(A,m0);PLD(S,m1);MSR(S,S);PUL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;LK(STACK);ADR(SP);"
             "ST(C0);ST(C1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;LK(STACK);ADR(FP);"
             "ST(C0);ST(C1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "S[$v]",
     .prefix = {24, 5},
     .code = "LD(C2);UL;PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;LK(STACK);"
             "ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "D[$v]",
     .prefix = {25, 5},
     .code = "LD(C2);UL;PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;LK(DATA);"
             "ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "E[$v]",
     .prefix = {26, 5},
     .code = "LD(C2);UL;PLK(p);PLD(A,C0);PLD(S,C1);MSR(S,S);PUL;LK(EXTRA);"
             "ADR(C2);ST(C0);ST(C1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_ReadPortWordIfReady[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PLD(TS,m);MSR(S,S);PUL;"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:LKR(m);ADR(m);ST(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:ADD(C2,m);LKR(m);ADR(C2);ST(C0);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:LK(STACK);ADR(SP);ST(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:ADD(C2,SP);LK(STACK);ADR(C2);ST(C0);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:LK(STACK);ADR(FP);ST(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:ADD(C2,FP);LK(STACK);ADR(C2);ST(C0);UL;"},
    {.source = "S($v)",
     .prefix = {28, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:LK(STACK);ADR(C2);ST(C0);UL;"},
    {.source = "D($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:LK(DATA);ADR(C2);ST(C0);UL;"},
    {.source = "E($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(S,@ready);END;"
             "@ready:LK(EXTRA);ADR(C2);ST(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_ReadPortDwordIfReady[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(S,@ready);"
             "END;@ready:LKR(m);ADR(m);ST(C0);ST(C1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;"
             "JC(S,@ready);END;@ready:ADD(C2,m);LKR(m);ADR(C2);ST(C0);"
             "ST(C1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;PLK(p);PLD(TA,m0);PLD(TS,m1);MSR(S,S);PUL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(S,@ready);"
             "END;@ready:LK(STACK);ADR(SP);ST(C0);ST(C1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;"
             "JC(S,@ready);END;@ready:ADD(C2,SP);LK(STACK);ADR(C2);ST(C0);"
             "ST(C1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(S,@ready);"
             "END;@ready:LK(STACK);ADR(FP);ST(C0);ST(C1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;"
             "JC(S,@ready);END;@ready:ADD(C2,FP);LK(STACK);ADR(C2);ST(C0);"
             "ST(C1);UL;"},
    {.source = "S[$v]",
     .prefix = {24, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;"
             "JC(S,@ready);END;@ready:LK(STACK);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "D[$v]",
     .prefix = {25, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;"
             "JC(S,@ready);END;@ready:LK(DATA);ADR(C2);ST(C0);ST(C1);UL;"},
    {.source = "E[$v]",
     .prefix = {26, 5},
     .code = "LD(C2);UL;PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;"
             "JC(S,@ready);END;@ready:LK(EXTRA);ADR(C2);ST(C0);ST(C1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_ReadPortWordRepeat[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,m);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LKR(m);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,m);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LKR(m);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "(SP)",
     .prefix = {16, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,SP);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(STACK);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "(SP + $v)",
     .prefix = {17, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,SP);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(STACK);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "(FP)",
     .prefix = {18, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,FP);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(STACK);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "(FP + $v)",
     .prefix = {19, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,FP);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(STACK);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "S($v)",
     .prefix = {20, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(STACK);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "D($v)",
     .prefix = {21, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(DATA);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
    {.source = "E($v)",
     .prefix = {22, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@read:PLK(p);PLD(TS,C0);MSR(S,S);PUL;JC(NS,@done);LK(EXTRA);"
             "ADR(C2);ST(C0);LAD(C2);UL;JD(R7,@read);@done:END;"},
};

constexpr oz3::MacroCodeDef kMacroCode_ReadPortDwordRepeat[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,m);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LKR(m);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,m);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LKR(m);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "[SP]",
     .prefix = {16, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,SP);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "[SP + $v]",
     .prefix = {17, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,SP);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "[FP]",
     .prefix = {18, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,FP);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "[FP + $v]",
     .prefix = {19, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,FP);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "S[$v]",
     .prefix = {20, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(STACK);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "D[$v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(DATA);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
    {.source = "E[$v]",
     .prefix = {22, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@read:PLK(p);PLD(TA,C0);PLD(TS,C1);MSR(S,S);PUL;JC(NS,@done);"
             "LK(EXTRA);ADR(C2);ST(C0);ST(C1);LAD(C2);UL;JD(R7,@read);"
             "@done:END;"},
};

constexpr oz3::MacroCodeDef kMacroCode_WritePortWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PST(S,m);PUL;MSS(S);MSR(_,S);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(C0);UL;PLK(p);PST(S,C0);PUL;MSS(S);"
             "MSR(_,S);"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C0);UL;PLK(p);"
             "PST(S,C0);PUL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);UL;PLK(p);PST(S,C0);PUL;MSS(S);"
             "MSR(_,S);"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(C0);UL;PLK(p);"
             "PST(S,C0);PUL;MSS(S);MSR(_,S);"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;LK(STACK);ADR(FP);LD(C0);UL;PLK(p);PST(S,C0);PUL;MSS(S);"
             "MSR(_,S);"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(C0);UL;PLK(p);"
             "PST(S,C0);PUL;MSS(S);MSR(_,S);"},
    {.source = "$v",
     .prefix = {28, 5},
     .code = "LD(C0);UL;PLK(p);PST(S,C0);PUL;MSS(S);MSR(_,S);"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C0);UL;PLK(p);PST(S,C0);PUL;"
             "MSS(S);MSR(_,S);"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C0);UL;PLK(p);PST(S,C0);PUL;"
             "MSS(S);MSR(_,S);"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C0);UL;PLK(p);PST(S,C0);PUL;"
             "MSS(S);MSR(_,S);"},
};

constexpr oz3::MacroCodeDef kMacroCode_WritePortDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(C0);LD(C1);UL;PLK(p);PST(A,C0);PST(S,C1);"
             "PUL;MSS(S);MSR(_,S);"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(A,C0);PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;PLK(p);PST(A,m0);PST(S,m1);PUL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);LD(C1);UL;PLK(p);PST(A,C0);"
             "PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(C0);LD(C1);UL;"
             "PLK(p);PST(A,C0);PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;LK(STACK);ADR(FP);LD(C0);LD(C1);UL;PLK(p);PST(A,C0);"
             "PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(C0);LD(C1);UL;"
             "PLK(p);PST(A,C0);PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "$V",
     .prefix = {24, 5},
     .code = "LD(C0);LD(C1);UL;PLK(p);PST(A,C0);PST(S,C1);PUL;MSS(S);"
             "MSR(_,S);"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(A,C0);PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C0);LD(C1);UL;PLK(p);PST(A,C0);"
             "PST(S,C1);PUL;MSS(S);MSR(_,S);"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(A,C0);PST(S,C1);PUL;MSS(S);MSR(_,S);"},
};

constexpr oz3::MacroCodeDef kMacroCode_WritePortWordIfReady[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;PLK(p);PST(TS,m);PUL;MSX(S);MSR(S,S);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(C0);UL;PLK(p);PST(TS,C0);PUL;MSX(S);"
             "MSR(S,S);"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C0);UL;PLK(p);"
             "PST(TS,C0);PUL;MSX(S);MSR(S,S);"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);UL;PLK(p);PST(TS,C0);PUL;MSX(S);"
             "MSR(S,S);"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(C0);UL;PLK(p);"
             "PST(TS,C0);PUL;MSX(S);MSR(S,S);"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;LK(STACK);ADR(FP);LD(C0);UL;PLK(p);PST(TS,C0);PUL;MSX(S);"
             "MSR(S,S);"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(C0);UL;PLK(p);"
             "PST(TS,C0);PUL;MSX(S);MSR(S,S);"},
    {.source = "$v",
     .prefix = {28, 5},
     .code = "LD(C0);UL;PLK(p);PST(TS,C0);PUL;MSX(S);MSR(S,S);"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C0);UL;PLK(p);PST(TS,C0);PUL;"
             "MSX(S);MSR(S,S);"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C0);UL;PLK(p);PST(TS,C0);PUL;"
             "MSX(S);MSR(S,S);"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C0);UL;PLK(p);PST(TS,C0);PUL;"
             "MSX(S);MSR(S,S);"},
};

constexpr oz3::MacroCodeDef kMacroCode_WritePortDwordIfReady[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(C0);LD(C1);UL;PLK(p);PST(TA,C0);"
             "PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;PLK(p);PST(A,m0);PST(S,m1);PUL;MSX(S);MSR(S,S);"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;LK(STACK);ADR(SP);LD(C0);LD(C1);UL;PLK(p);PST(TA,C0);"
             "PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);LK(STACK);ADR(C2);LD(C0);LD(C1);UL;"
             "PLK(p);PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;LK(STACK);ADR(FP);LD(C0);LD(C1);UL;PLK(p);PST(TA,C0);"
             "PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);LK(STACK);ADR(C2);LD(C0);LD(C1);UL;"
             "PLK(p);PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "$V",
     .prefix = {24, 5},
     .code = "LD(C0);LD(C1);UL;PLK(p);PST(TA,C0);PST(TS,C1);PUL;MSX(S);"
             "MSR(S,S);"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C0);LD(C1);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);"},
};

constexpr oz3::MacroCodeDef kMacroCode_WritePortWordRepeat[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,m);"
             "@write:LKR(m);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,m);"
             "@write:LKR(m);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "(SP)",
     .prefix = {16, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,SP);"
             "@write:LK(STACK);ADR(SP);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "(SP + $v)",
     .prefix = {17, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,SP);"
             "@write:LK(STACK);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "(FP)",
     .prefix = {18, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,FP);"
             "@write:LK(STACK);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "(FP + $v)",
     .prefix = {19, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,FP);"
             "@write:LK(STACK);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "S($v)",
     .prefix = {20, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@write:LK(STACK);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "D($v)",
     .prefix = {21, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@write:LK(DATA);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
    {.source = "E($v)",
     .prefix = {22, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@write:LK(EXTRA);ADR(C2);LD(C0);LAD(C2);UL;PLK(p);PST(TS,C0);"
             "PUL;MSX(S);MSR(S,S);JD(R7,@write);@done:END;"},
};

constexpr oz3::MacroCodeDef kMacroCode_WritePortDwordRepeat[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,m);"
             "@write:LKR(m);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,m);"
             "@write:LKR(m);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "[SP]",
     .prefix = {16, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,SP);"
             "@write:LK(STACK);ADR(SP);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "[SP + $v]",
     .prefix = {17, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,SP);"
             "@write:LK(STACK);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "[FP]",
     .prefix = {18, 5},
     .code = "UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);MOV(C2,FP);"
             "@write:LK(STACK);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "[FP + $v]",
     .prefix = {19, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);ADD(C2,FP);"
             "@write:LK(STACK);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "S[$v]",
     .prefix = {20, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@write:LK(STACK);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "D[$v]",
     .prefix = {21, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@write:LK(DATA);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
    {.source = "E[$v]",
     .prefix = {22, 5},
     .code = "LD(C2);UL;MSS(S);MSR(_,S);CMP(R7,C0);JC(Z,@done);"
             "@write:LK(EXTRA);ADR(C2);LD(C0);LD(C1);LAD(C2);UL;PLK(p);"
             "PST(TA,C0);PST(TS,C1);PUL;MSX(S);MSR(S,S);JD(R7,@write);"
             "@done:END;"},
};

constexpr oz3::MacroDef kMacros[] = {
    {.name = "GetWord",
     .ret = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_GetWord},
    {.name = "GetDword",
     .ret = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_GetDword},
    {.name = "Get16BitMask",
     .ret = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_Get16BitMask},
    {.name = "Get32BitMask",
     .ret = oz3::ArgType::kDwordReg,
     .size = 6,
     .code = kMacroCode_Get32BitMask},
    {.name = "LoadWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_LoadWord},
    {.name = "LoadDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_LoadDword},
    {.name = "StoreWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_StoreWord},
    {.name = "StoreDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_StoreDword},
    {.name = "MoveSReg",
     .size = 7,
     .code = kMacroCode_MoveSReg},
    {.name = "PopWord",
     .size = 5,
     .code = kMacroCode_PopWord},
    {.name = "PopDword",
     .size = 5,
     .code = kMacroCode_PopDword},
    {.name = "SwapWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_SwapWord},
    {.name = "SwapDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_SwapDword},
    {.name = "LogicalShiftLeft16",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_LogicalShiftLeft16},
    {.name = "LogicalShiftLeft32",
     .param = oz3::ArgType::kDwordReg,
     .size = 6,
     .code = kMacroCode_LogicalShiftLeft32},
    {.name = "ReadPortWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_ReadPortWord},
    {.name = "ReadPortDword",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_ReadPortDword},
    {.name = "ReadPortWordIfReady",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_ReadPortWordIfReady},
    {.name = "ReadPortDwordIfReady",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_ReadPortDwordIfReady},
    {.name = "ReadPortWordRepeat",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_ReadPortWordRepeat},
    {.name = "ReadPortDwordRepeat",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_ReadPortDwordRepeat},
    {.name = "WritePortWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_WritePortWord},
    {.name = "WritePortDword",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_WritePortDword},
    {.name = "WritePortWordIfReady",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_WritePortWordIfReady},
    {.name = "WritePortDwordIfReady",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_WritePortDwordIfReady},
    {.name = "WritePortWordRepeat",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_WritePortWordRepeat},
    {.name = "WritePortDwordRepeat",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_WritePortDwordRepeat},
};

constexpr oz3::InstructionDef kInstructions[] = {
    {.op = 0,
     .op_name = "NOP",
     .code = "UL;"},
    {.op = 1,
     .op_name = "HALT",
     .code = "UL;ADDI(IP,-1);HALT;"},
    {.op = 2,
     .op_name = "WAIT",
     .source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;WAIT(a);"},
    {.op = 3,
     .op_name = "MOV.LW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$LoadWord(a);"},
    {.op = 4,
     .op_name = "MOV.LD",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$LoadDword(A);"},
    {.op = 5,
     .op_name = "MOV.SW",
     .source = "$m, $r",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kWordReg, 3},
     .code = "$StoreWord(b);"},
    {.op = 6,
     .op_name = "MOV.SD",
     .source = "$m, $R",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kDwordReg, 2},
     .code = "$StoreDword(B);"},
    {.op = 7,
     .op_name = "MOV.S",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 7},
     .code = "$MoveSReg;"},
    {.op = 8,
     .op_name = "MVQ.LW",
     .source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;MOV(a,C1);"},
    {.op = 9,
     .op_name = "MVQ.LD",
     .source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;MOV(a0,C1);MOVI(a1,0);"},
    {.op = 10,
     .op_name = "PUSH.W",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;LK(STACK);ADR(SP);STP(C2);LAD(SP);UL;"},
    {.op = 11,
     .op_name = "PUSH.D",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;LK(STACK);ADR(SP);STP(C1);STP(C0);LAD(SP);UL;"},
    {.op = 12,
     .op_name = "POP.W",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$PopWord;"},
    {.op = 13,
     .op_name = "POP.D",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$PopDword;"},
    {.op = 14,
     .op_name = "SWP.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$SwapWord(a);"},
    {.op = 15,
     .op_name = "SWP.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$SwapDword(A);"},
    {.op = 16,
     .op_name = "NEG.W",
     .source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;SUB(C0,a);MSC(CO);MSR(ZSCO,ZSCO);MOV(a,C0);"},
    {.op = 17,
     .op_name = "NEG.D",
     .source = "$R",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;SUB(C0,a0);MSR(Z,Z);SBC(C1,a1);MSC(CO);MSR(ZSCO,_SCO);"
             "MOV(a0,C0);MOV(a1,C1);"},
    {.op = 18,
     .op_name = "ADD.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADD(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 19,
     .op_name = "ADD.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;ADD(a0,r0);MSR(Z,Z);ADC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 20,
     .op_name = "ADD.S",
     .source = "SP, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADD(SP,r);MSR(ZSCO,ZSCO);"},
    {.op = 21,
     .op_name = "ADQ.W",
     .source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(a,C1);MSR(ZSCO,ZSCO);"},
    {.op = 22,
     .op_name = "ADQ.D",
     .source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(a0,C1);MSR(Z,Z);ADC(a1,C2);MSR(ZSCO,_SCO);"},
    {.op = 23,
     .op_name = "ADQ.S",
     .source = "SP, $#5",
     .arg1 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(SP,C1);MSR(ZSCO,ZSCO);"},
    {.op = 24,
     .op_name = "ADC.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADC(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 25,
     .op_name = "ADC.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;ADC(a0,r0);MSR(Z,Z);ADC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 26,
     .op_name = "SUB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SUB(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 27,
     .op_name = "SUB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;SUB(a0,r0);MSR(Z,Z);SBC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 28,
     .op_name = "SUB.S",
     .source = "SP, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SUB(SP,r);MSR(ZSCO,ZSCO);"},
    {.op = 29,
     .op_name = "SBQ.W",
     .source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(a,C1);MSR(ZSCO,ZSCO);"},
    {.op = 30,
     .op_name = "SBQ.D",
     .source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(a0,C1);MSR(Z,Z);SBC(a1,C2);MSR(ZSCO,_SCO);"},
    {.op = 31,
     .op_name = "SBQ.S",
     .source = "SP, $#5",
     .arg1 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(SP,C1);MSR(ZSCO,ZSCO);"},
    {.op = 32,
     .op_name = "SBC.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SBC(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 33,
     .op_name = "SBC.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;SBC(a0,r0);MSR(Z,Z);SBC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 34,
     .op_name = "NOT.W",
     .source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;NOT(a,a);MSR(ZSCO,ZSCO);"},
    {.op = 35,
     .op_name = "NOT.D",
     .source = "$R",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;NOT(a0,a0);MSR(Z,Z);NOT(a1,a1);MSR(ZSCO,_SCO);"},
    {.op = 36,
     .op_name = "AND.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;AND(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 37,
     .op_name = "AND.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;AND(a0,r0);MSR(Z,Z);AND(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 38,
     .op_name = "OR.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;OR(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 39,
     .op_name = "OR.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;OR(a0,r0);MSR(Z,Z);OR(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 40,
     .op_name = "XOR.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;XOR(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 41,
     .op_name = "XOR.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;XOR(a0,r0);MSR(Z,Z);XOR(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 42,
     .op_name = "SHL.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "UL;$LogicalShiftLeft16(a);"},
    {.op = 43,
     .op_name = "SHL.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "UL;$LogicalShiftLeft32(A);"},
    {.op = 44,
     .op_name = "CLRB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;NOT(r,r);AND(a,r);"},
    {.op = 45,
     .op_name = "CLRB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;NOT(r0,r0);NOT(r1,r1);AND(a0,r0);AND(a1,r1);"},
    {.op = 46,
     .op_name = "SETB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;OR(a,r);"},
    {.op = 47,
     .op_name = "SETB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;OR(a0,r0);OR(a1,r1);"},
    {.op = 48,
     .op_name = "NOTB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;XOR(a,r);"},
    {.op = 49,
     .op_name = "NOTB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;XOR(a0,r0);XOR(a1,r1);"},
    {.op = 50,
     .op_name = "TSTB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;AND(r,a);MSR(Z,Z);"},
    {.op = 51,
     .op_name = "TSTB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;AND(r0,a0);MSR(Z,Z);AND(r1,a1);MSR(Z,_);"},
    {.op = 52,
     .op_name = "CLRF",
     .source = "$#4",
     .arg1 = {oz3::ArgType::kImmediate, 4},
     .code = "MSC(a);MSR(a,_);UL;"},
    {.op = 53,
     .op_name = "SETF",
     .source = "$#4",
     .arg1 = {oz3::ArgType::kImmediate, 4},
     .code = "MSS(a);MSR(_,a);UL;"},
    {.op = 54,
     .op_name = "NOTF",
     .source = "$#4",
     .arg1 = {oz3::ArgType::kImmediate, 4},
     .code = "MSX(a);MSR(a,a);UL;"},
    {.op = 55,
     .op_name = "TST.W",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;CMP(r,C0);MSR(ZSCO,ZSCO);"},
    {.op = 56,
     .op_name = "TST.D",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;CMP(r0,C2);MSR(Z,Z);CMP(r1,C2);MSR(ZSCO,_SCO);"},
    {.op = 57,
     .op_name = "CMP.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;CMP(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 58,
     .op_name = "CMP.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;CMP(a0,r0);MSR(Z,Z);MOV(C2,a1);SBC(C2,r1);"
             "MSR(ZSCO,_SCO);"},
    {.op = 59,
     .op_name = "JP",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;MOV(IP,r);"},
    {.op = 60,
     .op_name = "JPR",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADD(IP,r);"},
    {.op = 61,
     .op_name = "JC",
     .source = "$#3, $m",
     .arg1 = {oz3::ArgType::kImmediate, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;JC(a,@jump);END;@jump:MOV(IP,r);"},
    {.op = 62,
     .op_name = "JCR",
     .source = "$#3, $m",
     .arg1 = {oz3::ArgType::kImmediate, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;JC(a,@jump);END;@jump:ADD(IP,r);"},
    {.op = 63,
     .op_name = "CALL",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;LK(STACK);ADR(SP);STP(IP);UL;MOV(IP,r);"},
    {.op = 64,
     .op_name = "CALLR",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;LK(STACK);ADR(SP);STP(IP);UL;ADD(IP,r);"},
    {.op = 65,
     .op_name = "FBGN",
     .code = "UL;LK(STACK);ADR(SP);STP(FP);LAD(SP);UL;MOV(FP,SP);"},
    {.op = 66,
     .op_name = "FEND",
     .code = "UL;MOV(SP,FP);LK(STACK);ADR(SP);LD(FP);LAD(SP);UL;"},
    {.op = 67,
     .op_name = "RET",
     .code = "UL;LK(STACK);ADR(SP);LD(IP);LAD(SP);UL;"},
    {.op = 68,
     .op_name = "RET.A",
     .source = "$#5",
     .arg1 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(SP,C0);LK(STACK);ADR(SP);LD(IP);LAD(SP);UL;"},
    {.op = 69,
     .op_name = "RETC",
     .source = "$#3",
     .arg1 = {oz3::ArgType::kImmediate, 3},
     .code = "UL;JC(a,@return);END;@return:LK(STACK);ADR(SP);LD(IP);"
             "LAD(SP);UL;"},
    {.op = 70,
     .op_name = "RETC.A",
     .source = "$#3, $#5",
     .arg1 = {oz3::ArgType::kImmediate, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;JC(a,@return);END;@return:ADD(SP,C1);LK(STACK);ADR(SP);"
             "LD(IP);LAD(SP);UL;"},
    {.op = 71,
     .op_name = "IRT",
     .code = "UL;LK(STACK);ADR(SP);LD(ST);LD(IP);LAD(SP);UL;MSM(ZSCOI,ST);"
             "MSR(ZSCOI,ZSCOI);"},
    {.op = 72,
     .op_name = "IRT.A",
     .source = "$#5",
     .arg1 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(SP,C0);LK(STACK);ADR(SP);LD(ST);LD(IP);LAD(SP);UL;"
             "MSM(ZSCOI,ST);MSR(ZSCOI,ZSCOI);"},
    {.op = 73,
     .op_name = "IRTC",
     .source = "$#3",
     .arg1 = {oz3::ArgType::kImmediate, 3},
     .code = "UL;JC(a,@return);END;@return:LK(STACK);ADR(SP);LD(ST);LD(IP);"
             "LAD(SP);UL;MSM(ZSCOI,ST);MSR(ZSCOI,ZSCOI);"},
    {.op = 74,
     .op_name = "IRTC.A",
     .source = "$#3, $#5",
     .arg1 = {oz3::ArgType::kImmediate, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;JC(a,@return);END;@return:ADD(SP,C1);LK(STACK);ADR(SP);"
             "LD(ST);LD(IP);LAD(SP);UL;MSM(ZSCOI,ST);MSR(ZSCOI,ZSCOI);"},
    {.op = 75,
     .op_name = "EI",
     .code = "UL;MSS(I);MSR(_,I);"},
    {.op = 76,
     .op_name = "DI",
     .code = "UL;MSC(I);MSR(I,_);"},
    {.op = 77,
     .op_name = "GETI",
     .source = "$m, $r",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kWordReg, 3},
     .code = "$GetWord;ILD(r,b);"},
    {.op = 78,
     .op_name = "SETI",
     .source = "$m, $r",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kWordReg, 3},
     .code = "$GetWord;IST(r,b);"},
    {.op = 79,
     .op_name = "INT",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;INT(r);"},
    {.op = 80,
     .op_name = "IN.RW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$ReadPortWord(a);"},
    {.op = 81,
     .op_name = "IN.IW",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$ReadPortWord(MB);"},
    {.op = 82,
     .op_name = "IN.RD",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$ReadPortDword(a);"},
    {.op = 83,
     .op_name = "IN.ID",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$ReadPortDword(MB);"},
    {.op = 84,
     .op_name = "INS.RW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$ReadPortWordIfReady(a);"},
    {.op = 85,
     .op_name = "INS.IW",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$ReadPortWordIfReady(MB);"},
    {.op = 86,
     .op_name = "INS.RD",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$ReadPortDwordIfReady(a);"},
    {.op = 87,
     .op_name = "INS.ID",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$ReadPortDwordIfReady(MB);"},
    {.op = 88,
     .op_name = "INR.RW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$ReadPortWordRepeat(a);"},
    {.op = 89,
     .op_name = "INR.IW",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$ReadPortWordRepeat(MB);"},
    {.op = 90,
     .op_name = "INR.RD",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$ReadPortDwordRepeat(a);"},
    {.op = 91,
     .op_name = "INR.ID",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$ReadPortDwordRepeat(MB);"},
    {.op = 92,
     .op_name = "OUT.RW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$WritePortWord(a);"},
    {.op = 93,
     .op_name = "OUT.IW",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$WritePortWord(MB);"},
    {.op = 94,
     .op_name = "OUT.RD",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$WritePortDword(a);"},
    {.op = 95,
     .op_name = "OUT.ID",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$WritePortDword(MB);"},
    {.op = 96,
     .op_name = "OUTS.RW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$WritePortWordIfReady(a);"},
    {.op = 97,
     .op_name = "OUTS.IW",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$WritePortWordIfReady(MB);"},
    {.op = 98,
     .op_name = "OUTS.RD",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$WritePortDwordIfReady(a);"},
    {.op = 99,
     .op_name = "OUTS.ID",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$WritePortDwordIfReady(MB);"},
    {.op = 100,
     .op_name = "OUTR.RW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$WritePortWordRepeat(a);"},
    {.op = 101,
     .op_name = "OUTR.IW",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$WritePortWordRepeat(MB);"},
    {.op = 102,
     .op_name = "OUTR.RD",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$WritePortDwordRepeat(a);"},
    {.op = 103,
     .op_name = "OUTR.ID",
     .source = "$v, $m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "LD(MB);$WritePortDwordRepeat(MB);"},
};

constexpr oz3::InstructionSetDef kInstructionSet = {
    .instructions=kInstructions,
    .macros=kMacros,
};

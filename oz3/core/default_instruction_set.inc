constexpr oz3::MacroCodeDef kMacroCode_GetWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CpuCore::MM0,
     .code = "UL;"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C2,
     .code = "UL;LKR(m);ADR(m);LD(C2);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C2);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .ret = CpuCore::C2,
     .code = "UL;LKR(SP);ADR(SP);LD(C2);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,SP);LKR(SP);ADR(C2);LD(C2);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .ret = CpuCore::C2,
     .code = "UL;LKR(FP);ADR(FP);LD(C2);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,FP);LKR(FP);ADR(C2);LD(C2);UL;"},
    {.source = "$v",
     .prefix = {28, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C2);UL;"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C2);UL;"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C2);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_GetDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "UL;LKR(m);ADR(m);LD(C0);LD(C1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .ret = CpuCore::CpuCore::MM,
     .code = "UL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .ret = CpuCore::CD,
     .code = "UL;LKR(SP);ADR(SP);LD(C0);LD(C1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .ret = CpuCore::CD,
     .code = "UL;LKR(FP);ADR(FP);LD(C0);LD(C1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "$v",
     .prefix = {24, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(C0);LD(C1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_Get16BitMask[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C0,
     .code = "UL;MOV(C2,m);MOVI(C0,1);CMP(C1,m);JC(Z,@done);@shift:SL(C0);"
             "JD(C2,@shift);@done:MSS(_);"},
    {.source = "0",
     .prefix = {8, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,1);"},
    {.source = "1",
     .prefix = {9, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,2);"},
    {.source = "2",
     .prefix = {10, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,4);"},
    {.source = "3",
     .prefix = {11, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,8);"},
    {.source = "4",
     .prefix = {12, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,16);"},
    {.source = "5",
     .prefix = {13, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,32);"},
    {.source = "6",
     .prefix = {14, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);"},
    {.source = "7",
     .prefix = {15, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);"},
    {.source = "8",
     .prefix = {16, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);"},
    {.source = "9",
     .prefix = {17, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);"},
    {.source = "10",
     .prefix = {18, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "11",
     .prefix = {19, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "12",
     .prefix = {20, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "13",
     .prefix = {21, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);"},
    {.source = "14",
     .prefix = {22, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);"},
    {.source = "15",
     .prefix = {23, 5},
     .ret = CpuCore::C0,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);SL(C0);"},
};

constexpr oz3::MacroCodeDef kMacroCode_Get32BitMask[] = {
    {.source = "$r",
     .prefix = {0, 3},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C2,16);CMP(C2,m);JC(S,@upper);JC(Z,@sixteen);"
             "MOVI(C0,1);CMP(C1,m);JC(Z,@done);MOV(C2,m);"
             "@shift_lower:SL(C0);JD(C2,@shift_lower);JP(@done);"
             "@sixteen:MOVI(C1,1);JP(@done);@upper:MOV(C2,m);ADDI(C2,-16);"
             "MOVI(C1,1);CMP(C0,C2);JC(Z,@done);@shift_upper:SL(C1);"
             "JD(C2,@shift_upper);@done:MSS(_);"},
    {.source = "0",
     .prefix = {8, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,1);"},
    {.source = "1",
     .prefix = {9, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,2);"},
    {.source = "2",
     .prefix = {10, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,4);"},
    {.source = "3",
     .prefix = {11, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,8);"},
    {.source = "4",
     .prefix = {12, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,16);"},
    {.source = "5",
     .prefix = {13, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,32);"},
    {.source = "6",
     .prefix = {14, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);"},
    {.source = "7",
     .prefix = {15, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);"},
    {.source = "8",
     .prefix = {16, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);"},
    {.source = "9",
     .prefix = {17, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);"},
    {.source = "10",
     .prefix = {18, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "11",
     .prefix = {19, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "12",
     .prefix = {20, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"},
    {.source = "13",
     .prefix = {21, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);"},
    {.source = "14",
     .prefix = {22, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);"},
    {.source = "15",
     .prefix = {23, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C0,64);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);SL(C0);"
             "SL(C0);SL(C0);SL(C0);"},
    {.source = "16",
     .prefix = {24, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,1);"},
    {.source = "17",
     .prefix = {25, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,2);"},
    {.source = "18",
     .prefix = {26, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,4);"},
    {.source = "19",
     .prefix = {27, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,8);"},
    {.source = "20",
     .prefix = {28, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,16);"},
    {.source = "21",
     .prefix = {29, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,32);"},
    {.source = "22",
     .prefix = {30, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);"},
    {.source = "23",
     .prefix = {31, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);"},
    {.source = "24",
     .prefix = {32, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);"},
    {.source = "25",
     .prefix = {33, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);"},
    {.source = "26",
     .prefix = {34, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);"},
    {.source = "27",
     .prefix = {35, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"},
    {.source = "28",
     .prefix = {36, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"},
    {.source = "29",
     .prefix = {37, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"
             "SL(C1);"},
    {.source = "30",
     .prefix = {38, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"
             "SL(C1);SL(C1);"},
    {.source = "31",
     .prefix = {39, 6},
     .ret = CpuCore::CD,
     .code = "UL;MOVI(C1,64);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);SL(C1);"
             "SL(C1);SL(C1);SL(C1);"},
};

constexpr oz3::MacroCodeDef kMacroCode_LoadWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(p,m);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(p);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(p);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;LKR(SP);ADR(SP);LD(p);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);LD(p);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;LKR(FP);ADR(FP);LD(p);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);LD(p);UL;"},
    {.source = "$v",
     .prefix = {28, 5},
     .code = "LD(p);UL;"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(p);UL;"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(p);UL;"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(p);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_LoadDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(p0);LD(p1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;MOV(p0,m0);MOV(p1,m1);"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;LKR(SP);ADR(SP);LD(p0);LD(p1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;LKR(FP);ADR(FP);LD(p0);LD(p1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "$V",
     .prefix = {24, 5},
     .code = "LD(p0);LD(p1);UL;"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(p0);LD(p1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_StoreWord[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);ST(p);UL;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);ST(p);UL;"},
    {.source = "(SP)",
     .prefix = {16, 5},
     .code = "UL;LKR(SP);ADR(SP);ST(p);UL;"},
    {.source = "(SP + $v)",
     .prefix = {17, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);ST(p);UL;"},
    {.source = "(FP)",
     .prefix = {18, 5},
     .code = "UL;LKR(FP);ADR(FP);ST(p);UL;"},
    {.source = "(FP + $v)",
     .prefix = {19, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);ST(p);UL;"},
    {.source = "S($v)",
     .prefix = {20, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);ST(p);UL;"},
    {.source = "D($v)",
     .prefix = {21, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);ST(p);UL;"},
    {.source = "E($v)",
     .prefix = {22, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);ST(p);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_StoreDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);ST(p0);ST(p1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "[SP]",
     .prefix = {16, 5},
     .code = "UL;LKR(SP);ADR(SP);ST(p0);ST(p1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {17, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "[FP]",
     .prefix = {18, 5},
     .code = "UL;LKR(FP);ADR(FP);ST(p0);ST(p1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {19, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "S[$v]",
     .prefix = {20, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "D[$v]",
     .prefix = {21, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "E[$v]",
     .prefix = {22, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);ST(p0);ST(p1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_MoveSReg[] = {
    {.source = "$r, BC",
     .prefix = {0, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BC);"},
    {.source = "$r, BS",
     .prefix = {1, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BS);"},
    {.source = "$r, BD",
     .prefix = {2, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BD);"},
    {.source = "$r, BE",
     .prefix = {3, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BE);"},
    {.source = "$r, FP",
     .prefix = {4, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,FP);"},
    {.source = "$r, SP",
     .prefix = {5, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,SP);"},
    {.source = "BC, $r",
     .prefix = {6, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BC,m);"},
    {.source = "BS, $r",
     .prefix = {7, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BS,m);"},
    {.source = "BD, $r",
     .prefix = {8, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BD,m);"},
    {.source = "BE, $r",
     .prefix = {9, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BE,m);"},
    {.source = "FP, $r",
     .prefix = {10, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(FP,m);"},
    {.source = "SP, $r",
     .prefix = {11, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(SP,m);"},
    {.source = "BC, $v",
     .prefix = {96, 7},
     .code = "LD(C0);UL;MOV(BC,C0);"},
    {.source = "BS, $v",
     .prefix = {97, 7},
     .code = "LD(C0);UL;MOV(BS,C0);"},
    {.source = "BD, $v",
     .prefix = {98, 7},
     .code = "LD(C0);UL;MOV(BD,C0);"},
    {.source = "BE, $v",
     .prefix = {99, 7},
     .code = "LD(C0);UL;MOV(BE,C0);"},
    {.source = "FP, $v",
     .prefix = {100, 7},
     .code = "LD(C0);UL;MOV(FP,C0);"},
    {.source = "SP, $v",
     .prefix = {101, 7},
     .code = "LD(C0);UL;MOV(SP,C0);"},
};

constexpr oz3::MacroCodeDef kMacroCode_SwapWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p);MOV(p,m);MOV(m,C0);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p);LKR(m);ADR(m);LD(p);STP(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);MOV(C0,p);LKR(m);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;MOV(C0,p);LKR(SP);ADR(SP);LD(p);STP(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);MOV(C0,p);LKR(SP);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;MOV(C0,p);LKR(FP);ADR(FP);LD(p);STP(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);MOV(C0,p);LKR(FP);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "S($v)",
     .prefix = {28, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(STACK);ADR(C2);LD(p);STP(C0);UL;"},
    {.source = "D($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(DATA);ADR(C2);LD(p);STP(C0);UL;"},
    {.source = "E($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(EXTRA);ADR(C2);LD(p);STP(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_SwapDword[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(m);ADR(m);LD(p0);LD(p1);STP(C1);"
             "STP(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);MOV(C0,p0);MOV(C1,p1);LKR(m);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;MOV(C0,p0);MOV(p0,m0);MOV(m0,C0);MOV(C1,p1);MOV(p1,m1);"
             "MOV(m1,C1);"},
    {.source = "(SP)",
     .prefix = {20, 5},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(SP);ADR(SP);LD(p0);LD(p1);"
             "STP(C1);STP(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);MOV(C0,p0);MOV(C1,p1);LKR(SP);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "(FP)",
     .prefix = {22, 5},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(FP);ADR(FP);LD(p0);LD(p1);"
             "STP(C1);STP(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);MOV(C0,p0);MOV(C1,p1);LKR(FP);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "S($v)",
     .prefix = {24, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "D($v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(DATA);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "E($v)",
     .prefix = {26, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(EXTRA);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_ClearFlag[] = {
    {.source = "Z",
     .prefix = {0, 4},
     .code = "MSC(Z);MSR(Z,_);"},
    {.source = "S",
     .prefix = {1, 4},
     .code = "MSC(S);MSR(S,_);"},
    {.source = "ZS",
     .prefix = {2, 4},
     .code = "MSC(ZS);MSR(ZS,_);"},
    {.source = "C",
     .prefix = {3, 4},
     .code = "MSC(C);MSR(C,_);"},
    {.source = "ZC",
     .prefix = {4, 4},
     .code = "MSC(ZC);MSR(ZC,_);"},
    {.source = "SC",
     .prefix = {5, 4},
     .code = "MSC(SC);MSR(SC,_);"},
    {.source = "ZSC",
     .prefix = {6, 4},
     .code = "MSC(ZSC);MSR(ZSC,_);"},
    {.source = "O",
     .prefix = {7, 4},
     .code = "MSC(O);MSR(O,_);"},
    {.source = "ZO",
     .prefix = {8, 4},
     .code = "MSC(ZO);MSR(ZO,_);"},
    {.source = "SO",
     .prefix = {9, 4},
     .code = "MSC(SO);MSR(SO,_);"},
    {.source = "ZSO",
     .prefix = {10, 4},
     .code = "MSC(ZSO);MSR(ZSO,_);"},
    {.source = "CO",
     .prefix = {11, 4},
     .code = "MSC(CO);MSR(CO,_);"},
    {.source = "ZCO",
     .prefix = {12, 4},
     .code = "MSC(ZCO);MSR(ZCO,_);"},
    {.source = "SCO",
     .prefix = {13, 4},
     .code = "MSC(SCO);MSR(SCO,_);"},
    {.source = "ZSCO",
     .prefix = {14, 4},
     .code = "MSC(ZSCO);MSR(ZSCO,_);"},
};

constexpr oz3::MacroCodeDef kMacroCode_SetFlag[] = {
    {.source = "Z",
     .prefix = {0, 4},
     .code = "MSS(Z);MSR(_,Z);"},
    {.source = "S",
     .prefix = {1, 4},
     .code = "MSS(S);MSR(_,S);"},
    {.source = "ZS",
     .prefix = {2, 4},
     .code = "MSS(ZS);MSR(_,ZS);"},
    {.source = "C",
     .prefix = {3, 4},
     .code = "MSS(C);MSR(_,C);"},
    {.source = "ZC",
     .prefix = {4, 4},
     .code = "MSS(ZC);MSR(_,ZC);"},
    {.source = "SC",
     .prefix = {5, 4},
     .code = "MSS(SC);MSR(_,SC);"},
    {.source = "ZSC",
     .prefix = {6, 4},
     .code = "MSS(ZSC);MSR(_,ZSC);"},
    {.source = "O",
     .prefix = {7, 4},
     .code = "MSS(O);MSR(_,O);"},
    {.source = "ZO",
     .prefix = {8, 4},
     .code = "MSS(ZO);MSR(_,ZO);"},
    {.source = "SO",
     .prefix = {9, 4},
     .code = "MSS(SO);MSR(_,SO);"},
    {.source = "ZSO",
     .prefix = {10, 4},
     .code = "MSS(ZSO);MSR(_,ZSO);"},
    {.source = "CO",
     .prefix = {11, 4},
     .code = "MSS(CO);MSR(_,CO);"},
    {.source = "ZCO",
     .prefix = {12, 4},
     .code = "MSS(ZCO);MSR(_,ZCO);"},
    {.source = "SCO",
     .prefix = {13, 4},
     .code = "MSS(SCO);MSR(_,SCO);"},
    {.source = "ZSCO",
     .prefix = {14, 4},
     .code = "MSS(ZSCO);MSR(_,ZSCO);"},
};

constexpr oz3::MacroDef kMacros[] = {
    {.name = "GetWord",
     .ret = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_GetWord},
    {.name = "GetDword",
     .ret = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_GetDword},
    {.name = "Get16BitMask",
     .ret = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_Get16BitMask},
    {.name = "Get32BitMask",
     .ret = oz3::ArgType::kDwordReg,
     .size = 6,
     .code = kMacroCode_Get32BitMask},
    {.name = "LoadWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_LoadWord},
    {.name = "LoadDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_LoadDword},
    {.name = "StoreWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_StoreWord},
    {.name = "StoreDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_StoreDword},
    {.name = "MoveSReg",
     .size = 7,
     .code = kMacroCode_MoveSReg},
    {.name = "SwapWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_SwapWord},
    {.name = "SwapDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_SwapDword},
    {.name = "ClearFlag",
     .size = 4,
     .code = kMacroCode_ClearFlag},
    {.name = "SetFlag",
     .size = 4,
     .code = kMacroCode_SetFlag},
};

constexpr oz3::InstructionDef kInstructions[] = {
    {.op = 0,
     .op_name = "NOP",
     .code = "UL;"},
    {.op = 1,
     .op_name = "HALT",
     .code = "UL;ADDI(IP,-1);HALT;"},
    {.op = 2,
     .op_name = "WAIT",
     .source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;WAIT(a);"},
    {.op = 3,
     .op_name = "MOV.LW",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$LoadWord(a);"},
    {.op = 4,
     .op_name = "MOV.LD",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$LoadDword(A);"},
    {.op = 5,
     .op_name = "MOV.SW",
     .source = "$m, $r",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kWordReg, 3},
     .code = "$StoreWord(b);"},
    {.op = 6,
     .op_name = "MOV.SD",
     .source = "$m, $R",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kDwordReg, 2},
     .code = "$StoreDword(B);"},
    {.op = 7,
     .op_name = "MOV.S",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 7},
     .code = "$MoveSReg;"},
    {.op = 8,
     .op_name = "MVQ.LW",
     .source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;MOV(a,C1);"},
    {.op = 9,
     .op_name = "MVQ.LD",
     .source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;MOV(a0,C1);MOVI(a1,0);"},
    {.op = 10,
     .op_name = "SWP.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$SwapWord(a);"},
    {.op = 11,
     .op_name = "SWP.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$SwapDword(A);"},
    {.op = 12,
     .op_name = "NEG.W",
     .source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;SUB(C0,a);MSC(CO);MSR(ZSCO,ZSCO);MOV(a,C0);"},
    {.op = 13,
     .op_name = "NEG.D",
     .source = "$R",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;SUB(C0,a0);MSR(Z,Z);SBC(C1,a1);MSC(CO);MSR(ZSCO,_SCO);"
             "MOV(a0,C0);MOV(a1,C1);"},
    {.op = 14,
     .op_name = "ADD.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADD(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 15,
     .op_name = "ADD.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;ADD(a0,r0);MSR(Z,Z);ADC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 16,
     .op_name = "ADQ.W",
     .source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(a,C1);MSR(ZSCO,ZSCO);"},
    {.op = 17,
     .op_name = "ADQ.D",
     .source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(a0,C1);MSR(Z,Z);ADC(a1,C2);MSR(ZSCO,_SCO);"},
    {.op = 18,
     .op_name = "ADC.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADC(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 19,
     .op_name = "ADC.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;ADC(a0,r0);MSR(Z,Z);ADC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 20,
     .op_name = "SUB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SUB(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 21,
     .op_name = "SUB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;SUB(a0,r0);MSR(Z,Z);SBC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 22,
     .op_name = "SBQ.W",
     .source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(a,C1);MSR(ZSCO,ZSCO);"},
    {.op = 23,
     .op_name = "SBQ.D",
     .source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(a0,C1);MSR(Z,Z);SBC(a1,C2);MSR(ZSCO,_SCO);"},
    {.op = 24,
     .op_name = "SBC.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SBC(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 25,
     .op_name = "SBC.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;SBC(a0,r0);MSR(Z,Z);SBC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 26,
     .op_name = "NOT.W",
     .source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;NOT(a,a);MSR(ZSCO,ZSCO);"},
    {.op = 27,
     .op_name = "NOT.D",
     .source = "$R",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;NOT(a0,a0);MSR(Z,Z);NOT(a1,a1);MSR(ZSCO,_SCO);"},
    {.op = 28,
     .op_name = "AND.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;AND(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 29,
     .op_name = "AND.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;AND(a0,r0);MSR(Z,Z);AND(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 30,
     .op_name = "OR.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;OR(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 31,
     .op_name = "OR.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;OR(a0,r0);MSR(Z,Z);OR(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 32,
     .op_name = "XOR.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;XOR(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 33,
     .op_name = "XOR.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;XOR(a0,r0);MSR(Z,Z);XOR(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 34,
     .op_name = "CLRB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;NOT(r,r);AND(a,r);"},
    {.op = 35,
     .op_name = "CLRB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;NOT(r0,r0);NOT(r1,r1);AND(a0,r0);AND(a1,r1);"},
    {.op = 36,
     .op_name = "SETB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;OR(a,r);"},
    {.op = 37,
     .op_name = "SETB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;OR(a0,r0);OR(a1,r1);"},
    {.op = 38,
     .op_name = "XORB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;XOR(a,r);"},
    {.op = 39,
     .op_name = "XORB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;XOR(a0,r0);XOR(a1,r1);"},
    {.op = 40,
     .op_name = "TSTB.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$Get16BitMask;AND(r,a);MSR(Z,Z);"},
    {.op = 41,
     .op_name = "TSTB.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 6},
     .code = "$Get32BitMask;AND(r0,a0);MSR(Z,Z);AND(r1,a1);MSR(Z,_);"},
    {.op = 42,
     .op_name = "CLRF",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 4},
     .code = "$ClearFlag;UL;"},
    {.op = 43,
     .op_name = "SETF",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 4},
     .code = "$SetFlag;UL;"},
    {.op = 44,
     .op_name = "TST.W",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;CMP(C0,r);MSR(ZSCO,ZSCO);"},
    {.op = 45,
     .op_name = "TST.D",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;CMP(C2,r0);MSR(Z,Z);SBC(C2,r1);MSR(ZSCO,_SCO);"},
    {.op = 46,
     .op_name = "CMP.W",
     .source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;CMP(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 47,
     .op_name = "CMP.D",
     .source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;CMP(a0,r0);MSR(Z,Z);MOV(C2,a1);SBC(C2,r1);"
             "MSR(ZSCO,_SCO);"},
    {.op = 48,
     .op_name = "JP",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;MOV(IP,r);"},
    {.op = 49,
     .op_name = "JPR",
     .source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADD(IP,r);"},
};

constexpr oz3::InstructionSetDef kInstructionSet = {
    .instructions=kInstructions,
    .macros=kMacros,
};

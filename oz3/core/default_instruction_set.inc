constexpr oz3::MacroCodeDef kMacroCode_GetWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CpuCore::MM0,
     .code = "UL;"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C2,
     .code = "UL;LKR(m);ADR(m);LD(C2);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,m);LKR(m);ADR(C2);LD(C2);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .ret = CpuCore::C2,
     .code = "UL;LKR(SP);ADR(SP);LD(C2);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,SP);LKR(SP);ADR(C2);LD(C2);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .ret = CpuCore::C2,
     .code = "UL;LKR(FP);ADR(FP);LD(C2);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;ADD(C2,FP);LKR(FP);ADR(C2);LD(C2);UL;"},
    {.source = "$v",
     .prefix = {28, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(STACK);ADR(C2);LD(C2);UL;"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(DATA);ADR(C2);LD(C2);UL;"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .ret = CpuCore::C2,
     .code = "LD(C2);UL;LK(EXTRA);ADR(C2);LD(C2);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_GetDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "UL;LKR(m);ADR(m);LD(C0);LD(C1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .ret = CpuCore::CpuCore::MM,
     .code = "UL;"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .ret = CpuCore::CD,
     .code = "UL;LKR(SP);ADR(SP);LD(C0);LD(C1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .ret = CpuCore::CD,
     .code = "UL;LKR(FP);ADR(FP);LD(C0);LD(C1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "$v",
     .prefix = {24, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(C0);LD(C1);UL;"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .ret = CpuCore::CD,
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(C0);LD(C1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_LoadWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(p,m);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(p);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(p);UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;LKR(SP);ADR(SP);LD(p);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);LD(p);UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;LKR(FP);ADR(FP);LD(p);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);LD(p);UL;"},
    {.source = "$v",
     .prefix = {28, 5},
     .code = "LD(p);UL;"},
    {.source = "S($v)",
     .prefix = {29, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(p);UL;"},
    {.source = "D($v)",
     .prefix = {30, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(p);UL;"},
    {.source = "E($v)",
     .prefix = {31, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(p);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_LoadDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);LD(p0);LD(p1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;MOV(p0,m0);MOV(p1,m1);"},
    {.source = "[SP]",
     .prefix = {20, 5},
     .code = "UL;LKR(SP);ADR(SP);LD(p0);LD(p1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {21, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "[FP]",
     .prefix = {22, 5},
     .code = "UL;LKR(FP);ADR(FP);LD(p0);LD(p1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {23, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "$V",
     .prefix = {24, 5},
     .code = "LD(p0);LD(p1);UL;"},
    {.source = "S[$v]",
     .prefix = {25, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "D[$v]",
     .prefix = {26, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);LD(p0);LD(p1);UL;"},
    {.source = "E[$v]",
     .prefix = {27, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);LD(p0);LD(p1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_StoreWord[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);ST(p);UL;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);ST(p);UL;"},
    {.source = "(SP)",
     .prefix = {16, 5},
     .code = "UL;LKR(SP);ADR(SP);ST(p);UL;"},
    {.source = "(SP + $v)",
     .prefix = {17, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);ST(p);UL;"},
    {.source = "(FP)",
     .prefix = {18, 5},
     .code = "UL;LKR(FP);ADR(FP);ST(p);UL;"},
    {.source = "(FP + $v)",
     .prefix = {19, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);ST(p);UL;"},
    {.source = "S($v)",
     .prefix = {20, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);ST(p);UL;"},
    {.source = "D($v)",
     .prefix = {21, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);ST(p);UL;"},
    {.source = "E($v)",
     .prefix = {22, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);ST(p);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_StoreDword[] = {
    {.source = "[$r]",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;LKR(m);ADR(m);ST(p0);ST(p1);UL;"},
    {.source = "[$r + $v]",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C0);UL;ADD(C0,m);LKR(m);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "[SP]",
     .prefix = {16, 5},
     .code = "UL;LKR(SP);ADR(SP);ST(p0);ST(p1);UL;"},
    {.source = "[SP + $v]",
     .prefix = {17, 5},
     .code = "LD(C0);UL;ADD(C0,SP);LKR(SP);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "[FP]",
     .prefix = {18, 5},
     .code = "UL;LKR(FP);ADR(FP);ST(p0);ST(p1);UL;"},
    {.source = "[FP + $v]",
     .prefix = {19, 5},
     .code = "LD(C0);UL;ADD(C0,FP);LKR(FP);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "S[$v]",
     .prefix = {20, 5},
     .code = "LD(C0);UL;LK(STACK);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "D[$v]",
     .prefix = {21, 5},
     .code = "LD(C0);UL;LK(DATA);ADR(C0);ST(p0);ST(p1);UL;"},
    {.source = "E[$v]",
     .prefix = {22, 5},
     .code = "LD(C0);UL;LK(EXTRA);ADR(C0);ST(p0);ST(p1);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_MoveSReg[] = {
    {.source = "$r, BC",
     .prefix = {0, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BC);"},
    {.source = "$r, BS",
     .prefix = {1, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BS);"},
    {.source = "$r, BD",
     .prefix = {2, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BD);"},
    {.source = "$r, BE",
     .prefix = {3, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,BE);"},
    {.source = "$r, FP",
     .prefix = {4, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,FP);"},
    {.source = "$r, SP",
     .prefix = {5, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(m,SP);"},
    {.source = "BC, $r",
     .prefix = {6, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BC,m);"},
    {.source = "BS, $r",
     .prefix = {7, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BS,m);"},
    {.source = "BD, $r",
     .prefix = {8, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BD,m);"},
    {.source = "BE, $r",
     .prefix = {9, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(BE,m);"},
    {.source = "FP, $r",
     .prefix = {10, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(FP,m);"},
    {.source = "SP, $r",
     .prefix = {11, 4},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(SP,m);"},
    {.source = "BC, $v",
     .prefix = {96, 7},
     .code = "LD(C0);UL;MOV(BC,C0);"},
    {.source = "BS, $v",
     .prefix = {97, 7},
     .code = "LD(C0);UL;MOV(BS,C0);"},
    {.source = "BD, $v",
     .prefix = {98, 7},
     .code = "LD(C0);UL;MOV(BD,C0);"},
    {.source = "BE, $v",
     .prefix = {99, 7},
     .code = "LD(C0);UL;MOV(BE,C0);"},
    {.source = "FP, $v",
     .prefix = {100, 7},
     .code = "LD(C0);UL;MOV(FP,C0);"},
    {.source = "SP, $v",
     .prefix = {101, 7},
     .code = "LD(C0);UL;MOV(SP,C0);"},
};

constexpr oz3::MacroCodeDef kMacroCode_SwapWord[] = {
    {.source = "$r",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p);MOV(p,m);MOV(m,C0);"},
    {.source = "($r)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p);LKR(m);ADR(m);LD(p);STP(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {2, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);MOV(C0,p);LKR(m);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "(SP)",
     .prefix = {24, 5},
     .code = "UL;MOV(C0,p);LKR(SP);ADR(SP);LD(p);STP(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;ADD(C2,SP);MOV(C0,p);LKR(SP);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "(FP)",
     .prefix = {26, 5},
     .code = "UL;MOV(C0,p);LKR(FP);ADR(FP);LD(p);STP(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {27, 5},
     .code = "LD(C2);UL;ADD(C2,FP);MOV(C0,p);LKR(FP);ADR(C2);LD(p);STP(C0);"
             "UL;"},
    {.source = "S($v)",
     .prefix = {28, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(STACK);ADR(C2);LD(p);STP(C0);UL;"},
    {.source = "D($v)",
     .prefix = {29, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(DATA);ADR(C2);LD(p);STP(C0);UL;"},
    {.source = "E($v)",
     .prefix = {30, 5},
     .code = "LD(C2);UL;MOV(C0,p);LK(EXTRA);ADR(C2);LD(p);STP(C0);UL;"},
};

constexpr oz3::MacroCodeDef kMacroCode_SwapDword[] = {
    {.source = "($r)",
     .prefix = {0, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(m);ADR(m);LD(p0);LD(p1);STP(C1);"
             "STP(C0);UL;"},
    {.source = "($r + $v)",
     .prefix = {1, 2},
     .arg = {oz3::ArgType::kWordReg, 3},
     .code = "LD(C2);UL;ADD(C2,m);MOV(C0,p0);MOV(C1,p1);LKR(m);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "$R",
     .prefix = {4, 3},
     .arg = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;MOV(C0,p0);MOV(p0,m0);MOV(m0,C0);MOV(C1,p1);MOV(p1,m1);"
             "MOV(m1,C1);"},
    {.source = "(SP)",
     .prefix = {20, 5},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(SP);ADR(SP);LD(p0);LD(p1);"
             "STP(C1);STP(C0);UL;"},
    {.source = "(SP + $v)",
     .prefix = {21, 5},
     .code = "LD(C2);UL;ADD(C2,SP);MOV(C0,p0);MOV(C1,p1);LKR(SP);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "(FP)",
     .prefix = {22, 5},
     .code = "UL;MOV(C0,p0);MOV(C1,p1);LKR(FP);ADR(FP);LD(p0);LD(p1);"
             "STP(C1);STP(C0);UL;"},
    {.source = "(FP + $v)",
     .prefix = {23, 5},
     .code = "LD(C2);UL;ADD(C2,FP);MOV(C0,p0);MOV(C1,p1);LKR(FP);ADR(C2);"
             "LD(p0);LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "S($v)",
     .prefix = {24, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(STACK);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "D($v)",
     .prefix = {25, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(DATA);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
    {.source = "E($v)",
     .prefix = {26, 5},
     .code = "LD(C2);UL;MOV(C0,p0);MOV(C1,p1);LK(EXTRA);ADR(C2);LD(p0);"
             "LD(p1);STP(C1);STP(C0);UL;"},
};

constexpr oz3::MacroDef kMacros[] = {
    {.name = "GetWord",
     .ret = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_GetWord},
    {.name = "GetDword",
     .ret = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_GetDword},
    {.name = "LoadWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_LoadWord},
    {.name = "LoadDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_LoadDword},
    {.name = "StoreWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_StoreWord},
    {.name = "StoreDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_StoreDword},
    {.name = "MoveSReg",
     .size = 7,
     .code = kMacroCode_MoveSReg},
    {.name = "SwapWord",
     .param = oz3::ArgType::kWordReg,
     .size = 5,
     .code = kMacroCode_SwapWord},
    {.name = "SwapDword",
     .param = oz3::ArgType::kDwordReg,
     .size = 5,
     .code = kMacroCode_SwapDword},
};

constexpr oz3::InstructionDef kInstructions[] = {
    {.op = 0,
     .op_name = "NOP",
     .code = "UL;"},
    {.op = 1,
     .op_name = "HALT",
     .code = "UL;ADDI(IP,-1);HALT;"},
    {.op = 2,
     .op_name = "WAIT",
     .arg_source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;WAIT(a);"},
    {.op = 3,
     .op_name = "MOV.LW",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$LoadWord(a);"},
    {.op = 4,
     .op_name = "MOV.LD",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$LoadDword(A);"},
    {.op = 5,
     .op_name = "MOV.SW",
     .arg_source = "$m, $r",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kWordReg, 3},
     .code = "$StoreWord(b);"},
    {.op = 6,
     .op_name = "MOV.SD",
     .arg_source = "$m, $R",
     .arg1 = {oz3::ArgType::kMacro, 5},
     .arg2 = {oz3::ArgType::kDwordReg, 2},
     .code = "$StoreDword(B);"},
    {.op = 7,
     .op_name = "MOV.S",
     .arg_source = "$m",
     .arg1 = {oz3::ArgType::kMacro, 7},
     .code = "$MoveSReg;"},
    {.op = 8,
     .op_name = "MVQ.LW",
     .arg_source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;MOV(a,C1);"},
    {.op = 9,
     .op_name = "MVQ.LD",
     .arg_source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;MOV(a0,C1);MOVI(a1,0);"},
    {.op = 10,
     .op_name = "SWP.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$SwapWord(a);"},
    {.op = 11,
     .op_name = "SWP.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$SwapDword(A);"},
    {.op = 12,
     .op_name = "NEG.W",
     .arg_source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;SUB(C0,a);MSC(CO);MSR(ZSCO,ZSCO);MOV(a,C0);"},
    {.op = 13,
     .op_name = "NEG.D",
     .arg_source = "$R",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;SUB(C0,a0);MSR(Z,Z);SBC(C1,a1);MSC(CO);MSR(ZSCO,_SCO);"
             "MOV(a0,C0);MOV(a1,C1);"},
    {.op = 14,
     .op_name = "ADD.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADD(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 15,
     .op_name = "ADD.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;ADD(a0,r0);MSR(Z,Z);ADC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 16,
     .op_name = "ADQ.W",
     .arg_source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(a,C1);MSR(ZSCO,ZSCO);"},
    {.op = 17,
     .op_name = "ADQ.D",
     .arg_source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;ADD(a0,C1);MSR(Z,Z);ADC(a1,C2);MSR(ZSCO,_SCO);"},
    {.op = 18,
     .op_name = "ADC.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;ADC(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 19,
     .op_name = "ADC.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;ADC(a0,r0);MSR(Z,Z);ADC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 20,
     .op_name = "SUB.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SUB(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 21,
     .op_name = "SUB.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;SUB(a0,r0);MSR(Z,Z);SBC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 22,
     .op_name = "SBQ.W",
     .arg_source = "$r, $#5",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(a,C1);MSR(ZSCO,ZSCO);"},
    {.op = 23,
     .op_name = "SBQ.D",
     .arg_source = "$R, $#5",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kImmediate, 5},
     .code = "UL;SUB(a0,C1);MSR(Z,Z);SBC(a1,C2);MSR(ZSCO,_SCO);"},
    {.op = 24,
     .op_name = "SBC.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;SBC(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 25,
     .op_name = "SBC.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;SBC(a0,r0);MSR(Z,Z);SBC(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 26,
     .op_name = "NOT.W",
     .arg_source = "$r",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .code = "UL;NOT(a,a);MSR(ZSCO,ZSCO);"},
    {.op = 27,
     .op_name = "NOT.D",
     .arg_source = "$R",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .code = "UL;NOT(a0,a0);MSR(Z,Z);NOT(a1,a1);MSR(ZSCO,_SCO);"},
    {.op = 28,
     .op_name = "AND.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;AND(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 29,
     .op_name = "AND.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;AND(a0,r0);MSR(Z,Z);AND(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 30,
     .op_name = "OR.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;OR(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 31,
     .op_name = "OR.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;OR(a0,r0);MSR(Z,Z);OR(a1,r1);MSR(ZSCO,_SCO);"},
    {.op = 32,
     .op_name = "XOR.W",
     .arg_source = "$r, $m",
     .arg1 = {oz3::ArgType::kWordReg, 3},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetWord;XOR(a,r);MSR(ZSCO,ZSCO);"},
    {.op = 33,
     .op_name = "XOR.D",
     .arg_source = "$R, $m",
     .arg1 = {oz3::ArgType::kDwordReg, 2},
     .arg2 = {oz3::ArgType::kMacro, 5},
     .code = "$GetDword;XOR(a0,r0);MSR(Z,Z);XOR(a1,r1);MSR(ZSCO,_SCO);"},
};

constexpr oz3::InstructionSetDef kInstructionSet = {
    .instructions=kInstructions,
    .macros=kMacros,
};
